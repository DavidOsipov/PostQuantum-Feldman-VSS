[build-system]
requires = ["setuptools>=69.2.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "PostQuantum-Feldman-VSS"
version = "0.8.1b1"
authors = [
  { name = "David Osipov", email = "personal@david-osipov.vision" },
]
maintainers = [
  { name = "David Osipov", email = "personal@david-osipov.vision" },
]
description = "Post-Quantum Secure Feldman's Verifiable Secret Sharing (VSS) in Python"
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "gmpy2 == 2.2.1",
  "msgpack == 1.1.0",
  "blake3 == 1.0.4; platform_system != 'Emscripten'",
]

[project.optional-dependencies]
memory_monitor = ["psutil == 7.0.0"]
dev = [
    "black >= 24.0",
    "isort >= 5.10",
    "flake8 >= 7.0",
    "bandit >= 1.7.4",
    "ruff >= 0.1.0",
    "mypy >= 1.0.0",
    "types-requests",
    "types-setuptools",
    "msgpack-types >= 0.5.0",
]

[project.urls]
Homepage = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS"
Issues = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/issues"
Source = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS"
documentation = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/wiki"
"Security Advisories" = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories"
"Security Policy" = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/policy"
"Personal Website" = "https://david-osipov.vision"
"LinkedIn" = "https://www.linkedin.com/in/david-osipov"
"GitHub Profile" = "https://github.com/DavidOsipov"
"ISNI" = "https://isni.org/isni/000000051802960X"
"ORCID" = "https://orcid.org/0009-0005-2713-9242"
"Telegram" = "https://telegram.me/david_osipov"
"Signal" =  "https://signal.me/#eu/d68l1UjrWlGVRzbfkVM1bvQMNqCqiae9GM86P_af8ZK2o5E5YSNKbL4MyM9y-2WH"

[tool.setuptools]
py-modules = ["feldman_vss"]
package-dir = { "" = "." }

[tool.poetry]
packages = [
    { include = "feldman_vss.py", from = "." }
]

[tool.pyright]
pythonVersion = "3.13"

[tool.poetry.dependencies]
python = "^3.10"
gmpy2 = "==2.2.1"
msgpack = "==1.1.0"
blake3 = "==1.0.4"
psutil = { version = "==7.0.0", optional = true }


[tool.poetry.group.dev.dependencies]
black = ">=24.0"
isort = ">=5.10"
flake8 = ">=7.0"
types-requests = "*"
types-setuptools = "*"
msgpack-types = "==0.5.0"

[tool.pytest.ini_options]
addopts = "-v -x --doctest-modules --cov=feldman_vss --cov-report=term-missing --cov-report=xml --cov-report=html"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
branch = true
source = ["feldman_vss.py"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "except ImportError",
    "if typing.TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["feldman_vss"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']


[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = ["__init__.py:F401"]

[tool.bandit]
exclude_dirs = ["tests", "examples", ".venv"]
skips = ["B311"]  # Skip B311 as it warns against random, but your code uses secrets module properly

[tool.bandit.assert_used]
skips = ["*/test_*.py"]  # Allow asserts in test files

[tool.bandit.tests]
# Cryptography-related
B324 = true  # hashlib usage checks
B505 = true  # weak_cryptographic_key
B103 = true  # set_bad_file_permissions
B303 = true  # Use of insecure MD2, MD4, MD5, or SHA1 hash functions
B501 = true  # request_with_no_cert_validation
B502 = true  # ssl_with_bad_version
B504 = true  # ssl_with_no_version
B506 = true  # yaml_load
B608 = true  # hardcoded_sql_expressions

# General security practices
B101 = true  # assert_used in non-test code
B110 = true  # try_except_pass
B112 = true  # try_except_continue
B613 = true  # trojansource (unicode-based vulnerabilities)
B703 = true  # django_mark_safe
B704 = true  # markupsafe_markup_xss

# High severity issues 
B602 = true  # subprocess_popen_with_shell_equals_true
B605 = true  # start_process_with_a_shell
B611 = true  # django_rawsql_used

# Deserialization security
B301 = true  # pickle and similar modules (unsafe deserialization)
B302 = true  # marshal (unsafe deserialization)

# Cryptographic weaknesses
B304 = true  # insecure ciphers
B305 = true  # insecure cipher modes (ECB)

# Code injection risks
B307 = true  # eval usage
B310 = true  # URL opening with potentially unsafe schemes

# Network security
B312 = true  # telnetlib usage (insecure protocol)
B321 = true  # ftplib usage (insecure protocol)
B323 = true  # SSL unverified context

# XML security
B313 = true  # xml.etree.cElementTree (XXE vulnerabilities)
B314 = true  # xml.etree.ElementTree (XXE vulnerabilities)
B315 = true  # xml.sax.expatreader (XXE vulnerabilities)
B316 = true  # xml.dom.expatbuilder (XXE vulnerabilities)
B317 = true  # xml.sax (XXE vulnerabilities)
B318 = true  # xml.dom.minidom (XXE vulnerabilities)
B319 = true  # xml.dom.pulldom (XXE vulnerabilities)

[tool.bandit.high_severity_level]
severity = "high"

[tool.bandit.medium_severity_level]
# Enable most important medium severity issues
severity = "medium"

[tool.bandit.log_level]
# Set log level to filter out warnings
level = "info"