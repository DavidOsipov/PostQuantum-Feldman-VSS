[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "PostQuantum-Feldman-VSS"
version = "0.8.1b2"
authors = [{ name = "David Osipov", email = "personal@david-osipov.vision" }]
maintainers = [
  { name = "David Osipov", email = "personal@david-osipov.vision" },
]
description = "Post-Quantum Secure Feldman's Verifiable Secret Sharing (VSS) in Python"
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = { text = "MIT" }
keywords = [
  "cryptography",
  "secret-sharing",
  "post-quantum",
  "verifiable-secret-sharing",
  "feldman-vss",
  "python",
  "security",
  "distributed-systems",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Security",
  "Topic :: Security :: Cryptography",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "gmpy2 == 2.2.1",
  "msgpack == 1.1.0",
  "blake3 ==1.0.5; platform_system != 'Emscripten'",
]

[project.optional-dependencies]
# Optional runtime dependency for memory monitoring feature
memory_monitor = ["psutil == 7.0.0"]

# Dependencies for development (linting, type checking, etc.)
dev = [
  "bandit >= 1.8.1",
  "ruff >= 0.11.0",
  "mypy >= 1.15.0",
  "types-requests",
  "types-setuptools",
  "msgpack-types >= 0.5.0",
  "gmpy2-stubs ==2.2.1.5",
  "pytest >= 8.3.0",
  "pytest-cov >= 5.0.0",
  "pytest-benchmark >= 4.0.0",
  "pytest-timeout >= 2.3.0",
  "pytest-xdist >= 3.5.0",
  "pytest-randomly >= 3.16.0",
]

# Dependencies specifically for running tests
test = [
  "pytest >= 8.3.0",
  "pytest-cov >= 5.0.0",
  "pytest-benchmark >= 4.0.0",
  "pytest-timeout >= 2.3.0",
  "pytest-xdist >= 3.5.0",
  "pytest-randomly >= 3.16.0",
]

[project.urls]
Homepage = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS"
Issues = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/issues"
Source = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS"
Documentation = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/wiki"
"Security Advisories" = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories"
"Security Policy" = "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/policy"
"Personal Website" = "https://david-osipov.vision"
"LinkedIn" = "https://www.linkedin.com/in/david-osipov"
"GitHub Profile" = "https://github.com/DavidOsipov"
"ISNI" = "https://isni.org/isni/000000051802960X"
"ORCID" = "https://orcid.org/0009-0005-2713-9242"
"Telegram" = "https://telegram.me/david_osipov"
"Signal" = "https://signal.me/#eu/d68l1UjrWlGVRzbfkVM1bvQMNqCqiae9GM86P_af8ZK2o5E5YSNKbL4MyM9y-2WH"

[tool.poetry]
# Explicitly define the package structure since it's a single file module
packages = [{ include = "feldman_vss.py", from = "." }]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.group.dev.dependencies]
# These dependencies are managed by Poetry's groups for development workflow
ruff = ">=0.11.0"
bandit = ">=1.8.1"
types-requests = "*"
types-setuptools = "*"
msgpack-types = "==0.5.0"
gmpy2-stubs = "==2.2.1.5"
# Test dependencies are also included here for the full dev environment
pytest = ">=8.3.0"
pytest-cov = ">=5.0.0"
pytest-benchmark = ">=4.0.0"
pytest-timeout = ">=2.3.0"
pytest-xdist = ">=3.5.0"
pytest-randomly = ">=3.16.0"
mypy = ">=1.15.0"

[tool.pyright]
pythonVersion = "3.13"

[tool.pytest.ini_options]
addopts = "-v -x --doctest-modules --cov=feldman_vss --cov-report=term-missing --cov-report=xml --cov-report=html --junitxml=report.xml"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
  "core: marks tests as core functionality",
  "error_handling: marks tests as error handling tests",
  "integration: marks tests as integration tests",
  "performance: marks tests as performance tests",
  "properties: marks tests as property-based tests",
  "security: marks tests as security-related tests",
  "slow: marks tests as slow running tests",
  "benchmark: marks tests for benchmarking",
]
timeout = 300
xfail_strict = true
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]

[tool.coverage.run]
branch = true
source = ["feldman_vss.py"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "raise NotImplementedError",
  "except ImportError",
  "if typing.TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "examples", ".venv"]
skips = ["B311", "B101"]

[tool.bandit.per-file-ignores]
"tests/*.py" = ["S101", "B101"]


[tool.bandit.tests]
# Cryptography-related
B324 = true # hashlib usage checks
B505 = true # weak_cryptographic_key
B103 = true # set_bad_file_permissions
B303 = true # Use of insecure MD2, MD4, MD5, or SHA1 hash functions
B501 = true # request_with_no_cert_validation
B502 = true # ssl_with_bad_version
B504 = true # ssl_with_no_version
B506 = true # yaml_load
B608 = true # hardcoded_sql_expressions

# General security practices
B101 = true # assert_used in non-test code
B110 = true # try_except_pass
B112 = true # try_except_continue
B613 = true # trojansource (unicode-based vulnerabilities)
B703 = true # django_mark_safe
B704 = true # markupsafe_markup_xss

# High severity issues
B602 = true # subprocess_popen_with_shell_equals_true
B605 = true # start_process_with_a_shell
B611 = true # django_rawsql_used

# Deserialization security
B301 = true # pickle and similar modules (unsafe deserialization)
B302 = true # marshal (unsafe deserialization)

# Cryptographic weaknesses
B304 = true # insecure ciphers
B305 = true # insecure cipher modes (ECB)

# Code injection risks
B307 = true # eval usage
B310 = true # URL opening with potentially unsafe schemes

# Network security
B312 = true # telnetlib usage (insecure protocol)
B321 = true # ftplib usage (insecure protocol)
B323 = true # SSL unverified context

# XML security
B313 = true # xml.etree.cElementTree (XXE vulnerabilities)
B314 = true # xml.etree.ElementTree (XXE vulnerabilities)
B315 = true # xml.sax.expatreader (XXE vulnerabilities)
B316 = true # xml.dom.expatbuilder (XXE vulnerabilities)
B317 = true # xml.sax (XXE vulnerabilities)
B318 = true # xml.dom.minidom (XXE vulnerabilities)
B319 = true # xml.dom.pulldom (XXE vulnerabilities)

[tool.bandit.high_severity_level]
severity = "high"

[tool.bandit.medium_severity_level]
# Enable most important medium severity issues
severity = "medium"

[tool.bandit.log_level]
# Set log level to filter out warnings
level = "info"

[tool.ruff]
line-length = 140
fixable = ["ALL"]
target-version = "py310" # Consistent with requires-python
select = [
  "F",    # Pyflakes
  "E",    # pycodestyle
  "W",    # pycodestyle
  "C90",  # mccabe
  "I",    # isort
  "N",    # pep8-naming
  "UP",   # pyupgrade
  "S",    # flake8-bandit
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "ISC",  # flake8-implicit-str-concat
  "G",    # flake8-logging-format
  "TID",  # flake8-tidy-imports
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "NPY",  # NumPy specific rules
  "PD",   # pandas-vet
  "PL",   # Pylint
  "PIE",  # flake8-pie
  "TRY",  # tryceratops
  "FURB", # refurb
]

ignore = [
  "E203",    # Whitespace before ':' (conflicts with Black)
  "PLR0913", # Too many arguments to function call
  "PLR0915", # Too many statements
  "PLR1702", # Too many nested blocks
  "PLR0912", # Too many branches
  "S101",    # Use of assert detected (we'll manage asserts in tests separately)
  "S104",    # Possible binding to all interfaces.  This is intentional.
  "S105",    # hardcoded-password-string
  "S106",    # hardcoded-password-func-arg
  "S107",    # hardcoded-password-default
  "SIM115",  # context manager, false positives
  "ERA001",  # Commented-out code.  This is sometimes desirable, and not a vulnerability.
  "TRY003",  # raise-vanilla-args, allow message customization.
  "TRY301",  # raise within try.  This is valid in many cases.
  "C901",    # Too complex.  We'll handle complexity on a case-by-case basis.
  "N806",    # Variable names; too restrictive
  "PLW0603", # global-statement, we are aware of the implications
  "PLW1514", # unspecified-encoding, default to utf-8 if not specified
  "PLR0911", # Too many return statements
  "PLR0914", # Too many local variables
  "PLR0206", # property-with-parameters, dataclasses with default values for properties.
  "PLW0120", # useless-else-on-loop, improves readability
  "PLW0602", # global-variable-not-assigned, allow globals for configuration
  "PLR0402", # manual-from-import, allow for clarity in some cases
  "F841",    # Local variable is assigned to but never used.  False positives with type-checking.
  "F401",    # Unused import, for type checking.
  "RUF009",  # Function call in dataclass default.  False-positive with cached_property.
  "RUF012",  # Mutable-class-default, intentional with `field(default_factory=list)`
  "RUF029",  # unused-async.  False positives with pytest fixtures, sometimes.
  "SIM108",  # if-else-block-instead-of-if-exp, ternary can reduce readability
  "SIM401",  # if-else-block-instead-of-dict-get, dict.get() is not always more readable
  "PLR6301", # no-self-use.  Too strict, often clearer to keep 'self'.
  "PLR1711", # useless-return, sometimes used for clarity.
  "PLR1722", # sys-exit-alias, sometimes clearer.
  "PLR2004", # magic-value-comparison.  Numbers are sometimes obvious.
  "PLW0108", # unnecessary-lambda.  Sometimes more readable.
  "PLW0604", # global-at-module-level, we are aware of the implications
  "UP007",   # non-pep604-annotation-union, prefer typing.Union for compatibility
  "UP037",   # quoted-annotation, remove once 3.10 is min supported version
  "B904",    # raise-without-from-inside-except
  "E741",    # Ambiguous variable name ('l', 'O', 'I').  Sometimes unavoidable.
  "N818",    # Exception name, not always appropriate to have Error suffix.
  "PERF203", # try-except-in-loop, sometimes necessary.
  "PLW0127", # self-assigning-variable.
  "PLR1736", # unnecessary-list-index-lookup.
  "RUF021",  # parenthesize-chained-operators.  Sometimes clear without parens.
  "RUF013",  # implicit-optional.  Stricter than PEP 484.
  "RUF034",  # useless-if-else. Sometimes clearer with the explicit `else`.
  "RUF036",  # none-not-at-end-of-union.  Stylistic preference.
  "RUF045",  # implicit-class-var-in-dataclass.
  "UP004",   # useless-object-inheritance.  Stylistic preference.
  "UP005",   # Deprecated unittest alias, for backwards compatibility.
  "UP038",   # non-pep604-isinstance, keep for compatibility
  "UP045",   # non-pep604-annotation-optional, for compatibility
  "RUF052",  # unused-dummy-variable. False positive with contextlib.suppress
  "RUF059",  # unused-unpacked-variable. False positive with contextlib.suppress
  "PLW0129", # assert-on-string-literal, sometimes used to show intent
  "PLR1733", # unnecessary-dict-index-lookup.
  "PLW3301", # nested-min-max.
  "RUF058",  # starmap-zip.
  "RUF038",  # redundant-bool-literal
  "RUF041",  # unnecessary-nested-literal.
  "RUF046",  # unnecessary-cast-to-int.
  "RUF057",  # unnecessary-round.
  "RUF032",  # decimal-from-float-literal.
  "PLR6201", # literal-membership
  "PLR6104", # non-augmented-assignment
  "PLR0202", # no-classmethod-decorator
  "PLR0203", # no-staticmethod-decorator
  "PLC1901", # compare-to-empty-string
  "PLC2701", # import-private-name
  "PLR0133", # comparison-of-constant
  "PLE0304", # invalid-bool-return-type
  "PLE1141", # dict-iter-missing-items
  "PLC0208", # iteration-over-set
  "PLE4703", # modified-iterating-set
  "PLW0177", # nan-comparison
  "PLW0244", # redefined-slots-in-subclass
  "PLW1641", # eq-without-hash
  "PLW3201", # bad-dunder-method-name
  "UP042",   # replace-str-enum
  "UP046",   # non-pep695-generic-class
  "UP047",   # non-pep695-generic-function
  "UP049",   # private-type-parameter
  "RUF049",  # dataclass-enum
  "RUF053",  # class-with-mixed-type-vars
  "RUF054",  # indented-form-feed
  "RUF055",  # unnecessary-regular-expression
  "RUF056",  # falsy-dict-get-fallback
  "RUF016",  # invalid-index-type
  "RUF031",  # incorrectly-parenthesized-tuple-in-subscript
  "RUF039",  # unraw-re-pattern
  "RUF043",  # pytest-raises-ambiguous-pattern
  "FURB110", # if-exp-instead-of-or-operator.
  "FURB113", # repeated-append.
  "FURB116", # f-string-number-format.
  "FURB122", # for-loop-writes.
  "FURB131", # delete-full-slice.
  "FURB132", # check-and-remove-from-set.
  "FURB136", # if-expr-min-max.
  "FURB140", # reimplemented-starmap.
  "FURB142", # for-loop-set-mutations.
  "FURB145", # slice-copy.
  "FURB148", # unnecessary-enumerate.
  "FURB152", # math-constant.
  "FURB154", # repeated-global.
  "FURB156", # hardcoded-string-charset.
  "FURB157", # verbose-decimal-constructor.
  "FURB162", # fromisoformat-replace-z.
  "FURB164", # unnecessary-from-float.
  "FURB166", # int-on-sliced-str.
  "FURB171", # single-item-membership-test.
  "FURB180", # meta-class-abc-meta.
  "FURB188", # slice-to-remove-prefix-or-suffix.
  "FURB189", # subclass-builtin.
  "FURB192", # sorted-min-max.
  "PLC1802", # len-test
  "RUF017",  # quadratic-list-summation
  "RUF018",  # assignment-in-assert
  "RUF027",  # missing-f-string-syntax
]


[tool.ruff.per-file-ignores]
"tests/*.py" = [
  "S101",
  "F841",
  "RUF018",
  "F811",
] # Allow asserts and unused vars in tests

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
