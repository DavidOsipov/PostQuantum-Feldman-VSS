name: 🛡️ Bastion Quality Gates

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read
  security-events: write

jobs:
  Analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [bandit, ruff, mypy, flake8, pylint, codeql, snyk]
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

      - name: Set up Python
        if: matrix.tool != 'codeql'  # Snyk needs Python setup
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55
        with:
          python-version: '3.13'

      - name: Cache pip dependencies
        if: matrix.tool != 'codeql'
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            /usr/local/lib/python3.13/site-packages
            ~/.cache/pypoetry
          key: pip-poetry-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-poetry-

      - name: Install project dependencies
        if: matrix.tool != 'codeql'
        run: |
          pip install poetry
          poetry install --with dev --no-interaction

      - name: Install analysis tools
        if: matrix.tool != 'codeql' && matrix.tool != 'snyk'
        run: |
          pip install bandit ruff mypy flake8 pylint

      - name: Setup Snyk CLI
        if: matrix.tool == 'snyk'
        uses: snyk/actions/setup@cdb760004ba9ea4d525f2e043745dfe85bb9077e
        with:
          snyk-version: latest

      - name: Run Snyk Security Scan
        if: matrix.tool == 'snyk'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_SECRET_TOKEN }}
          DEBUG: snyk*
        run: |
          snyk test \
            --command=poetry \
            --file=pyproject.toml \
            --strict-out-of-sync=false \
            --sarif-file-output=snyk_report.sarif

      # ... [keep other tool steps unchanged] ...

      - name: Upload report artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ matrix.tool }}-report
          path: ${{ matrix.tool }}_report.*

  SonarQube:
    needs: Analyze
    runs-on: ubuntu-latest
    steps:
      # ... [keep existing SonarQube steps] ...
      - name: Analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@aa494459d7c39c106cc77b166de8b4250a32bb97
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=DavidOsipov_PostQuantum-Feldman-VSS
            -Dsonar.organization=davidosipov
            -Dsonar.python.bandit.reportPaths=bandit_report.json
            -Dsonar.python.ruff.reportPaths=ruff_report.json
            -Dsonar.python.mypy.reportPaths=mypy_report.txt
            -Dsonar.python.flake8.reportPaths=flake8_report.txt
            -Dsonar.python.pylint.reportPaths=pylint_report.json
            -Dsonar.sarifReportPaths=codeql_report.sarif,snyk_report.sarif
            -Dsonar.python.version=3.10-3.13
            -Dsonar.languages=python